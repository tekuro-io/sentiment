# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Ingestor

on:
  push:
    branches:
      - master
    paths-ignore:
      - README.md

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
  ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
  IMAGE_NAME: artifacts.tekuro.io/sentiment:latest

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: clowdhaus/argo-cd-action/@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        version: 3.0.0
        command: version
        options: --client

    - uses: clowdhaus/argo-cd-action/@main
      with:
        version: 3.0.0
        command: version
        options: --client

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Build
      run: go build -v ./...

    - name: Login to Tekuro Artifacts
      uses: docker/login-action@v1
      with:
        registry: artifacts.tekuro.io
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: docker build -t ${{ env.IMAGE_NAME }} .

    - name: Push Docker image
      run: docker push ${{ env.IMAGE_NAME }}

    - name: Tag 
      id: tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git tag -l 'v*' --sort=-v:refname | head -n1)
        
        if [[ -z "$LATEST_TAG" ]]; then
          NEW_TAG="v1"
        else
          NUM=${LATEST_TAG#v}
          NUM=$((NUM + 1))
          NEW_TAG="v$NUM"
        fi

        cd deployment
        sed -i "/annotations:/,/^[^[:space:]]/ s/git-tag:.*/git-tag: \"$NEW_TAG\"/" deployment.yaml

        git config --global user.name 'Github Actions'
        git config --global user.email 'actions@github.com'
        git checkout -B release/$NEW_TAG
        git add deployment.yaml
        git commit -m "Release $NEW_TAG" || echo "No changes to commit"
        git push --force origin release/$NEW_TAG
        git tag $NEW_TAG
        git push origin $NEW_TAG
        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        
    - name: Release 
      env:
        NEW_TAG: ${{ steps.tag.outputs.new_tag }}
      run: |
        argocd login argo.tekuro.io --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
        argocd app set sentiment --revision $NEW_TAG
        argocd app sync sentiment 
